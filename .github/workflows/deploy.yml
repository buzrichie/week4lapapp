name: Deploy to ECS

on:
  push:
    branches:
      - main   # adjust to your branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to AWS with OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GITHUB_ACTIONS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

            # Build, tag and push image
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=latest
          ECR_REPO_URI=${{ secrets.ECR_REPOSITORY_URI }}
          echo "Building Docker image..."
          docker build -t $ECR_REPO_URI:$IMAGE_TAG .
          echo "Pushing to ECR..."
          docker push $ECR_REPO_URI:$IMAGE_TAG

      # Generate imagedefinitions.json
      - name: Generate imagedefinitions.json
        run: |
          echo "[{\"name\":\"${{ secrets.CONTAINER_NAME }}\",\"imageUri\":\"${{ secrets.ECR_REPOSITORY_URI }}:latest\"}]" > imagedefinitions.json
          cat imagedefinitions.json

      # Upload imagedefinitions.json to S3 artifact bucket
      - name: Upload imagedefinitions.json to S3
        run: |
          aws s3 cp imagedefinitions.json s3://${{ secrets.ARTIFACT_BUCKET }}/imagedefinitions.json

      # Trigger CodePipeline (deploys ECS with new image)
      - name: Trigger CodePipeline
        run: |
          aws codepipeline start-pipeline-execution --name ${{ secrets.CODEPIPELINE_NAME }}
