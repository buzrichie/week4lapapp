name: Build and Deploy to ECS via CodePipeline

on:
  push:
    branches:
      - main   # Change if your branch is different

permissions:
  id-token: write   # Required for OIDC
  contents: write   # Required for committing imagedefinitions.json

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-central-1

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push Docker image to ECR
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=latest
          ECR_REPO_URI=${{ secrets.ECR_REPOSITORY_URI }}
          echo "Building Docker image..."
          docker build -t $ECR_REPO_URI:$IMAGE_TAG .
          echo "Pushing to ECR..."
          docker push $ECR_REPO_URI:$IMAGE_TAG

      # Create imagedefinitions.json required for ECS deploy via CodePipeline
      - name: Create imagedefinitions.json
        run: |
          echo "[{\"name\":\"${{ secrets.ECS_CONTAINER_NAME }}\",\"imageUri\":\"${{ secrets.ECR_REPOSITORY_URI }}:latest\"}]" > imagedefinitions.json

      # Commit and push imagedefinitions.json so CodePipeline can access it
      - name: Commit imagedefinitions.json
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add imagedefinitions.json
          git commit -m "Add imagedefinitions.json for ECS deployment" || echo "No changes to commit"
          git push

      # Trigger CodePipeline to start deployment
      - name: Trigger CodePipeline
        run: |
          aws codepipeline start-pipeline-execution --name ${{ secrets.CODEPIPELINE_NAME }}
